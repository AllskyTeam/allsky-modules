import allsky_shared as allsky_shared
from allsky_base import ALLSKYMODULEBASE

import os
import subprocess
import datetime
from pathlib import Path

class ALLSKYKEOGRAM(ALLSKYMODULEBASE):

	meta_data = {
		"name": "Allsky Keogram",
		"description": "Creates a keogram.",
		"version": "v0.0.1",
		"pythonversion": "3.10.0",
		"centersettings": "false",
		"testable": "true",
		"module": "allsky_keogram",    
		"group": "Allsky Core",
		"events": [
			"nightday"
		],
		"experimental": "false",
		
	   	"arguments": {
			"upload" : "",
			"expand" : "",
			"rotation" : "0",
			"font_name" : "Simplex",
			"font_color" : "#ffffff",
			"font_size" : 2,
			"font_thickness" : 2,
			"extra_parameters" : "",
			"input_dir" : "",
			"upload_test" : ""
		},
		"argumentdetails" : {
			"upload" : {
				"required": "false",
				"description": "Upload",
				"help": "Enable to upload the keogram to an Allsky Website and/or remote server.",
				"tab": "Settings",
				"type": {
					"fieldtype": "checkbox"
				}               
			},
			"expand" : {
				"required": "false",
				"description": "Expand",
				"help": "Enable to expand keograms to the  image width. (Will avoid tall skinny images)",
				"tab": "Settings",
				"type": {
					"fieldtype": "checkbox"
				}                
			},
			"rotation" : {
				"required": "false",
				"description": "Rotation",
				"help": "(Optional) Number of degrees to rotate the captured image so the North-South meridian would go straight from top to bottom.  <i>+ for clockwise, - for counterclockwise</i>",
				"tab": "Settings",
				"type": {
					"fieldtype": "spinner",
					"min": -180,
					"max": 180,
					"step": 1
				}
			},
			"upload_notice": {
				"message": "Note: A website or remote server configured in Allsky Settings for upload to function.<br>Allsky websites also require configuration to show mini-timelapse in the navigation.",
				"tab": "Settings",
				"type": {
					"fieldtype": "text",
					"style": {
						"width": "full",
						"alert": {
							"class": "info"
						}
					}
				}
			},
			
			"html_section_break01": {
				"tab": "Settings",
				"source": "local",
				"html": "<hr>",
				"type": {
					"fieldtype": "html"
				}
			},
			"font_name": {
				"required": "true",
				"description": "Font Name",
				"help": "Font name.",
				"tab": "Settings",
				"type": {
					"fieldtype": "select",
					"values": "Simplex,Plain,Duplex,Complex,Complex Small,Triplex,Script Simplex,Script Complex"
				}              
			},
			"font_size": {
				"required": "false",
				"description": "Font Size",
				"help": "Font Size.",
				"tab": "Settings",
				"type": {
					"fieldtype": "spinner",
					"min": 1,
					"max": 10,
					"step": 0.1
				}           
			},
			"font_thickness": {
				"required": "false",
				"description": "Font thickness",
				"help": "Font Line thickness.",
				"tab": "Settings",
				"type": {
					"fieldtype": "spinner",
					"min": 1,
					"max": 10,
					"step": 1
				}           
			},
			"font_color": {
				"required": "false",
				"description": "Font Color",
				"help": "Font color.  #ffffff is white.  See the documentation for a description of this field.",
				"tab": "Settings"
			},
			"html_section_break02": {
				"tab": "Settings",
				"source": "local",
				"html": "<hr>",
				"type": {
					"fieldtype": "html"
				}
			},
			"extra_parameters": {
				"required": "false",
				"description": "Extra Parameters ",
				"help": "Optional additional keogram creation parameters.<br>Run ~/allsky/bin/keogram --help for a list of options",
				"tab": "Settings"
			},

			"test_notice": {
				"message": "Note: These settings only apply when using the [Test Module] button.",
				"tab": "Testing and Debug",
				"type": {
					"fieldtype": "text",
					"style": {
						"width": "full",
						"alert": {
							"class": "info"
						}
					}
				}
			},			
			"input_dir": {
				"required": "false",
				"description": "Directory of Files",
				"help": "The input directory containing image files from which to create a keogram.  eg 20250801",
				"tab": "Testing and Debug"
			},
			"upload_test" : {
				"required": "false",
				"description": "Upload test keogram",
				"help": "Enable to upload the keogram generated by a TEST to any configured Allsky Websites or remote servers.",
				"tab": "Testing and Debug",
				"type": {
					"fieldtype": "checkbox"
				}               
			},

			"html": {
				"tab": "Help",
				"source": "local",
				"html": "<h1>This help text is defined within the module</h1><blockquote>This help is hard coded into the modules config. This is ok for very short text but not good for longer. For longer text use the file option in the field</blockquote><p>Bacon ipsum dolor amet cow chislic strip steak pig pork belly chuck pork doner salami. Pig bresaola kielbasa rump. Jerky beef strip steak jowl beef ribs, kielbasa corned beef fatback cupim pork loin. Swine strip steak tongue turkey pig. Pork belly turducken boudin rump venison.</p><p>Burgdoggen beef pig ribeye, kielbasa biltong filet mignon shank turkey spare ribs ground round meatball sirloin picanha. Brisket t-bone doner, tri-tip jowl ham biltong kielbasa. Fatback chicken kevin tail prosciutto, frankfurter kielbasa capicola rump tri-tip andouille chislic swine pork loin filet mignon. T-bone ribeye spare ribs kevin, sausage turkey short loin short ribs filet mignon tri-tip bresaola. Beef ribs chislic pork, alcatra beef pig ball tip doner jowl shank kevin kielbasa meatloaf spare ribs. Ground round ham tail, flank pastrami kevin jerky.</p>",
				"type": {
					"fieldtype": "html"
				}
			}
		},
		"enabled": "false",
		"changelog": {
			"v0.0.1" : [
				{
					"author": "Kentner Cottingham",
					"authorurl": "https://github.com/AllSkyTeam",
					"changes": [
						"Refactored for Allsky v2025",
						"New module for night-day flow to replace settings"
					]
				}
			]                            
		}                 
	}

	def __execute_script(self, script_path: Path, *args: str) -> tuple[int, str, str]:
		"""
		- If 'script' is executable, run directly (works for binaries).
		- Otherwise, try via bash (for text shell scripts).
		Always return (returncode, stdout, stderr) of primitives.
		"""
		import shutil
		script_str = str(script_path)

		# Ensure output tokens are separate already in *args
		cmd = [script_str, *args]
		if not os.access(script_str, os.X_OK):
			# Fallback to bash only if not executable
			cmd = ["bash", script_str, *args]

		allsky_shared.log(0, f"Starting Keogram creation: {cmd}")
		try:
			proc = subprocess.run(cmd, capture_output=True, text=True, check=False)
			if proc.returncode == 0:
				allsky_shared.log(1, f"INFO: Successful: {script_str}")
			else:
				allsky_shared.log(0, f"ERROR: {script_str} - rc={proc.returncode}\nSTDERR:\n{proc.stderr}")
			return proc.returncode, proc.stdout, proc.stderr
		
		except Exception as e:
			return 1, "", str(e)


	# Main Module Function - take the parameters and pass to the keogram script then to upload script. 
	def run(self):
		upload = self.get_param('upload', False, bool)
		expand = self.get_param('expand', False, bool)
		rotation = self.get_param('rotation', 0, int)
		font_name = self.get_param('font_name', "Simplex", str)
		font_color= self.get_param('font_color', "#ffffff", str)
		font_size = self.get_param('font_size', 2, float)
		font_thickness = self.get_param('font_thickness', 3, int)
		extra_params = self.get_param('extra_parameters', "", str)
		#upload_test = self.get_param('upload_test', False, bool)

		allsky_home = allsky_shared.getEnvironmentVariable("ALLSKY_HOME")
		images_dir = allsky_shared.getEnvironmentVariable("ALLSKY_IMAGES")

		result = ""

		# Create keogram by deriving and passing parameters
	 
		# define date as today minus 1.
		#TODO: maybe a better varaible name than kdate?
		kdate = (datetime.datetime.now() - datetime.timedelta(days=1)).strftime("%Y%m%d")

		# set input directory and also upload setting
		if self.debugmode:
			upload = self.get_param('upload_test', False, bool)
			user_dir = self.get_param('input_dir', "", str)
			if user_dir:
				input_dir = user_dir if user_dir.startswith("/") else os.path.join(images_dir, user_dir)
				kdate = user_dir
			else:
				input_dir = os.path.join(images_dir, kdate)
		else:
			input_dir = os.path.join(images_dir, kdate)

		output_dir = os.path.join(input_dir, "keogram")
		os.makedirs(output_dir, exist_ok=True)  # safe to ensure it exists (but I think the keogram script creates it)

		#TODO: get extension from allsky settings directly? 
		full_file_name = allsky_shared.getSetting('filename')
		_, file_ext = os.path.splitext(full_file_name)
		ext = file_ext.lstrip('.')

		out_file = f"keogram-{kdate}.{ext}"

		# build info for running the script
		keo_script_path= os.path.join(allsky_home, "bin", "keogram")
		#script = "/home/RazAdmin/allsky/bin/keogram"
		create_params = [
			"-d", input_dir,
			"-e", ext,  # 'jpg' (no leading dot)
			"-o", f"{output_dir}/{out_file}",
			"-N", font_name,         # e.g., "Simplex"
			"-S", str(font_size),    # e.g., "2.0"
			"-C", font_color,        # e.g., "#ffffff"
			"-L", str(font_thickness)
		]
		if expand:
			create_params.append("--image-expand")
		if rotation != 0:
			create_params.extend(["--rotate", str(rotation)])
		
		# NOTE: there is no saftey here if a user adds an extra parameter for one of the input fields inthe module.  like specifying font size twice.
		# if these are entered in UI will need them to be comma separated to use!
		#	create_params.extend(extra_params.split())  # assumes space-separated extra params

		# Execute keogram program
		create_keo_rc, out, err = self.__execute_script(keo_script_path, *create_params)
		if create_keo_rc == 0:
				allsky_shared.log(1, f"INFO: Keogram created successfully: {os.path.join(output_dir, out_file)}")
		else:
			allsky_shared.log(0, f"ERROR: Keogram creation failed (rc={create_keo_rc}). See stderr:\n{err}")


		# 2. uploading, pass parameters to upload sh script (would need if conditions to check settings for local, remote, server)
		# upload if created and user selected to upload
		if upload and create_keo_rc == 0:
			upload_script_path = os.path.join(allsky_home, "scripts", "upload.sh")
			source_file = os.path.join(output_dir, out_file)
			remote_dir = "/keograms"

			# local website
			if allsky_shared.getSetting("uselocalwebsite")=="true":
				target = "--local-web"
				remote_dir = os.path.join(allsky_home, "html","allsky", "keograms")
				target_file = f"keogram.{ext}"
				#run upload script
				upload_keo_rc, out, err = self.__execute_script(upload_script_path, target, source_file, remote_dir, target_file)
				if upload_keo_rc == 0:
					allsky_shared.log(1, f"INFO: Keogram uploaded successfully: {os.path.join(output_dir, out_file)}")
				else:
					allsky_shared.log(0, f"ERROR: Failed to uplaod keogram to {target} (rc={create_keo_rc}). See stderr:\n{err}")

			#1 check if websites or server are configured
			if allsky_shared.getSetting("useremotewebsite")=="true":
				target = "--remote-web"
				remote_dir = allsky_shared.getSetting("remotewebsiteimagedir")+"/keograms"
				if allsky_shared.getSetting("remotewebsiteimageuploadoriginalname")=="true": 
					target_file = out_file
				else:
					target_file = f"keogram.{ext}"
				#run upload script
				upload_keo_rc, out, err = self.__execute_script(upload_script_path, target, source_file, remote_dir, target_file)
				if upload_keo_rc == 0:
					allsky_shared.log(1, f"INFO: Keogram uploaded successfully: {os.path.join(output_dir, out_file)}")
				else:
					allsky_shared.log(0, f"ERROR: Failed to uplaod keogram to {target} (rc={create_keo_rc}). See stderr:\n{err}")

			# remote website need to check "upload with original name?"
			if allsky_shared.getSetting("useremoteserver")=="true":
				target = "--remote-server"
				remote_dir = allsky_shared.getSetting("remoteserverimagedir")+"/keograms"
				if allsky_shared.getSetting("remoteserverimageuploadoriginalname")=="true": 
					target_file = out_file
				else:
					target_file = allsky_shared.getSetting("remoteserverkeogramdestinationname")
				#run upload script
				upload_keo_rc, out, err = self.__execute_script(upload_script_path, target, source_file, remote_dir, target_file)
				if upload_keo_rc == 0:
					allsky_shared.log(1, f"INFO: Keogram uploaded successfully: {os.path.join(output_dir, out_file)}")
				else:
					allsky_shared.log(0, f"ERROR: Failed to upload keogram to {target} (rc={create_keo_rc}). See stderr:\n{err}")

		#the end!

		return result
  

def keogram(params, event):
	allsky_keogram = ALLSKYKEOGRAM(params, event)
	result = allsky_keogram.run()

	return result 
